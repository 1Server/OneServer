## @package
# Creates a Python interface to the libupnp C library.

from manager import OneServerManager
import sys
try:
	from ctypes import cdll
	from ctypes import c_char_p,c_int,c_void_p,c_char,c_long,c_ubyte,c_uint,c_uint16,c_uint32,c_ushort
	from ctypes import POINTER,Structure,CFUNCTYPE
	from ctypes.util import find_library
except ImportError:
	OneServerManager().log.error('Library CTypes not found.')
	sys.exit()

from wrappers.upnp.ixml import DOMString,IXML_Document

NUM_HANDLER        = 200
LINE_SIZE          = 180
NAME_SIZE          = 256
MFNT_NAME_SIZE     = 64
MODL_NAME_SIZE     = 32
SERL_NUMR_SIZE     = 64
MODL_DESC_SIZE     = 64
UPNP_INFINITE      = -1
UPNP_USING_CHUNKED = -3
UPNP_UNITL_CLOSE   = -4

##
# Signifies that the operation completed successfully. For
# asynchronous functions, this only means that the packet
# generated by the operaiton was successfully transmitted
# on the network. The result of the entire operation
# comes as part of the callback for the operation.
UPNP_E_SUCCESS = 0

##
# Signifies that the handle passed to a function is not a
# recognized as a valid handle.
UPNP_E_INVALID_HANDLE = -100

##
# Signifies that one or more of the parameters passed to
# the function is not valid. Refer to the documentation for
# each function for more information on the valid ranges
# of the parameters.
UPNP_E_INVALID_PARAM = -101

##
# Signifies that the SDK does not have any mor espace for
# additional handles. The SDK allocates space for only a
# few handles in order to conserve memory.
UPNP_E_OUTOF_HANDLE = -102

UPNP_E_OUTOF_CONTEXT = -103

##
# Signifies that not enough resources are currently
# available to complete the operation. Most operations
# require some free memory inorder to complete their work.
UPNP_E_OUTOF_MEMORY = -104

##
# Signifies that the SDK has already been initialized.
# The SDK needs to be initialized only once per process.
# Any additional initialization attempts simply return
# this error with no other ill effects.
UPNP_E_INIT = -105

UPNP_E_BUFFER_TOO_SMALL = -106

##
# Signifies that the description document passed to
# UpnpRegisterRootDevice or UpnpRegisterRootDevice2
# is an invalid description document.
UPNP_E_INVALID_DESC = -107

##
# Signifies that a URL passed into the function is
# invalid. The actual cause is function specific,
# but in general, the URL itself might be malformed
# (e.g. have invalid characters in it) or the host
# might be unreachable.
UPNP_E_INVALID_URL = -108

UPNP_E_INVALID_SID = -109
UPNP_E_INVALID_DEVICE = -110

##
# This is returned only by UpnpNotify, UpnpNotifyExt,
# UpnpAcceptSubscription, and UpnpAcceptSubscriptionExt
# to signify that the device ID/serivce ID pair does
# not refer to a valid service.
UPNP_E_INVALID_SERVICE = -111

##
# Signifies that the response received from the remote
# side of a connection is not correct for teh protocol.
# This applies to the GENA, SOAP, and HTTP protocols.
UPNP_E_BAD_RESPONSE = -113

UPNP_E_BAD_REQUEST = -114

##
# Signifies that the SOAP action message is invalid.
# This can be because the DOM document passed to the
# function was malformed or the action message is not
# correct for the given action.
UPNP_E_INVALID_ACTION = -115

##
# Signifies that UpnpInit has not been called, or that
# UpnpFinish has already been called. None of the API
# functions operate until UpnpInit successfully completes.
UPNP_E_FINISH = -116

##
# Signifies that UpnpInit cannot complete. The typical
# reason is failure to allocate sufficient resources.
UPNP_E_INIT_FAILED = -117

##
# Signifies that the URL passed into a function is
# too long. The SDK limits URLs to 180 characters
# in length.
UPNP_E_URL_TOO_BIG = -118

## Signifies that the HTTP message contains invalid
# message headers. The error always refers to the
# HTTP message header received from the remote host.
# The main areas where this occurs are in SOAP
# control messages (e.g. UpnpSendAction), GENA
# subscription message (e.g. UpnpSubscribe), GENA
# event notification (e.g. UpnpNotify), and HTTP
# transfers (e.g. UpnpDownloadXmlDoc).
UPNP_E_BAD_HTTPMSG = -119

##
# Signifies that a client or device is already
# registered. The SDK only has a limit of one registered
# client and one registered device per process.
UPNP_E_ALREADY_REGISTERED = -120

##
# Signifies that a network error occured under one of
# the more specific error codes. The typical meaning
# is the SDK failed to read the local IP address or had
# problems configuring one of the sockets.
UPNP_E_NETWORK_ERROR = -200

##
# Signifies an error writing to a socket. This occurs
# in any function that makes network connections,
# such as discovery (e.g. UpnpSearchAsync or
# UpnpSendAdvertisement), control (e.g. UpnpSendAction),
# eventing (e.g. UpnpNotify), and HTTP functions (e.g.
# UpnpDownloadXmlDoc).
UPNP_E_SOCKET_WRITE = -201

##
# Signifies an error reading from a socket. This occurs
# in any function that makes network connections, such
# as discovery (e.g. UpnpSearchAsync or UpnpSendAdvertisement),
# control (e.g. UpnpSendAction), eventing (e.g. UpnpNotify),
# and HTTP functions (e.g. UpnpDownloadXmlDoc).
UPNP_E_SOCKET_READ = -202

##
# Signifies that the SDK had a problem binding a socket
# to a network interface. This occurs in any function
# that makes network connections, such as discovery
# (e.g. UpnpSearchAsync) or UpnpSendAdvertisement),
# control (e.g. UpnpSendAction), eventing (e.g.
# UpnpNotify), and HTTP functions (e.g. UpnpDownloadXmlDoc).
UPNP_E_SOCKET_BIND = -203

##
# Signifies that the SDK had a problem connecting to
# a remote host. This occurs in any functoin that makes
# network connections, such as discovery (e.g.
# UpnpSearchAsyn or UpnpSendAdvertisement), control (e.g.
# UpnpSendAction), eventing (e.g. UpnpNotify), and HTTP
# functions (e.g. UpnpDownloadXmlDoc).
UPNP_E_SOCKET_CONNECT = -204

##
# Signifies that the SDK cannot create any more sockets.
# This occurs in any function that makes network connections,
# such as discovery (e.g. UpnpSearchAsync or UpnpSendAdvertisement),
# control (e.g. UpnpSendAction), eventing (e.g. UpnpDownloadXmlDoc).
UPNP_E_OUTOF_SOCKET = -205

##
# Signifies that the SDK had a problem setting the socket to listen
# for incoming connections. This error only happens during
# initialization (i.e. UpnpInit).
UPNP_E_LISTEN = -206

##
# Signifies that too much time elapsed before the required
# number of bytes were sent or received over a socket. This
# error can be returned by any function that performs
# network operations.
UPNP_E_TIMEDOUT = -207

##
# This is the generic socket error code for conditions not covered
# by other error codes. This error can be returned by any function
# that performs network operations.
UPNP_E_SOCKET_ERROR = -208

UPNP_E_FILE_WRITE_ERROR = -209

##
# Signifies that the operation was canceled. This error can be returned
# by any function that allows for external cancelation.
UPNP_E_CANCELED = -210

UPNP_E_EVENT_PROTOCOL = -300

##
# Signifies that a subscription request was rejected from the remote
# side.
UPNP_E_SUBSCRIBE_UNACCEPTED = -301

##
# Signifies that an unsubscribe request was rejected from the remote side.
UPNP_E_UNSUBSCRIBE_UNACCEPTED = -302

##
# Signifies that the remote host did not accept the notify sent from
# the local device.
UPNP_E_NOTIFY_UNACCEPTED = -303

##
# Signifies that one or more of the parameters passed to a function
# is invalid. Refer to the individual functoin descriptions for
# the acceptable ranges for parameters.
UPNP_E_INVALID_ARGUMENT = -501

##
# Signifies that the filename passed to one of the devices
# registration functions was not found or was not accessible.
UPNP_E_FILE_NOT_FOUND = -502

##
# Signifies an error when reading a file.
UPNP_E_FILE_READ_ERROR = -503

##
# Signifies that the name of the description document passed to
# UpnpRegisterRootDevice2 does not end in ".xml".
UPNP_E_EXT_NOT_XML = -504

UPNP_E_NO_WEB_SERVER = -505

UPNP_E_OUTOF_BOUNDS = -506

##
# Signifies that the response to a SOAP request did not contain
# the required XML constructs.
UPNP_E_NOT_FOUND = -507

##
# This is the generic error code for interal conditions not covered
# by other error codes.
UPNP_E_INTERNAL_ERROR = -911

UPNP_SOAP_E_INVALID_ACTION = 401

UPNP_SOAP_E_INVALID_ARGS = 402

UPNP_SOAP_E_OUT_OF_SYNC = 403

UPNP_SOAP_E_INVALID_VAR = 404

UPNP_SOAP_E_ACTION_FAILED = 501

##
# Returned when a device application registers with UpnpRegisterRootDevice or UpnpRegisterRootDevice2.
# Device handles can only be used with functions that operate with a device handle.
UpnpDevice_Handle = c_int

##
# Is the Handle to a upnp client
UpnpClient_Handle = c_int

class UpnpOpenFileMode:
	UPNP_READ = 0
	UPNP_WRITE = 1

class Upnp_EventType_e:
	##
	# Received by a device when a control point issues a control
	# request. The Event parameter contains a pointer to a
	# Upnp_Action_Request structure containing the action. The
	# application stores the results of the action in the structure.
	UPNP_CONTROL_ACTION_REQUEST = 0

	##
	# A UpnpSendActionAsync call completed. The Event parameter
	# contains a pointer to a Upnp_Action_Complete structure
	# with the results of the action.
	UPNP_CONTROL_ACTION_COMPLETE = 1

	##
	# Received by a device when a query for a single service
	# variable arrives. The Event parameter contains a pointer
	# to a Upnp_Action_Complete structure with the results
	# of the action.
	UPNP_CONTROL_GET_VAR_REQUEST = 2

	##
	# A UpnpGetServiceVarStatus call completed. The Event parameter
	# contains a pointer to a Upnp_State_Var_Complete structure
	# containing the value for the variable.
	UPNP_CONTROL_GET_VAR_COMPLETE = 3

	##
	# Received by a control point when a new device or service is
	# available. The Event parameter contains a pointer to a
	# Upnp_Discovery structure with the information about the
	# device or service.
	UPNP_DISCOVERY_ADVERTISEMENT_ALIVE = 4

	##
	# Received by a control point when a device or service shuts
	# down. The Event parameter containing the information about
	# the device or service.
	UPNP_DISCOVERY_ADVERTISEMENT_BYEBYE = 5

	##
	# Received by a control point when a matching device or service
	# responds. The event parameter contains a pointer to a
	# Upnp_Discovery structure containing the information about the
	# reply to the search request.
	UPNP_DISCOVERY_SEARCH_RESULT = 6

	##
	# Received by a control point when teh search timeout expires
	# The SDK generates no more callbacks for this search after
	# this event. The Event parameter is NULL.
	UPNP_DISCOVERY_SEARCH_TIMEOUT = 7

	##
	# Received by a device when a subscription arrives. The Event
	# parameter contains a pointer to a Upnp_Subscription_Request
	# structure. At this point, the subscription has already
	# been accepted. UpnpAcceptSubscription needs to be called to
	# confirm the subscription and transmit the inital state table.
	# This can be done during this callback. The SDK generates no
	# events for a subscription unless the device application calls
	# UpnpAcceptSubscription.
	UPNP_EVENT_SUBSCRIPTION_REQUEST = 8

	##
	# Received by a control point when an event arrives. The Event
	# parameter contains a Upnp_Event structure with the information
	# about teh event.
	UPNP_EVENT_RECEIVED = 9

	##
	# A UpnpRenewSubscription call completed. The status of the
	# renewal is in the Event parameter as a Upnp_Event_Subscription
	# structure.
	UPNP_EVENT_RENEWAL_COMPLETE = 10

	##
	# A UpnpSubscriptionAsync call completed. The status of the
	# subscriptions is in the Event parameter as a
	# Upnp_Event_Subscription structure.
	UPNP_EVENT_SUBSCRIBE_COMPLETE = 11

	##
	# A UpnpUnSubscribeAsync call completed. The status of the
	# subscription is in the Event parameter as a
	# Upnp_Event_Subscription structure.
	UPNP_EVENT_UNSUBSCRIBE_COMPLETE = 12

	##
	# The auto-renewal of a client subscription failed. The
	# Event parameter is a Upnp_Event_Subscribe structure
	# with the error code set appropriately. The subscription
	# is no longer valid.
	UPNP_EVENT_AUTORENEWAL_FAILED = 13

	##
	# A client subscription has expired. This will only occur
	# if auto-renewal of subscription is disabled. The Event
	# parameter is a Upnp_Event_Subscribe structure. The
	# subscription is no longer valid.
	UPNP_EVENT_SUBSCRIPTION_EXPIRED = 14

Upnp_EventType = c_int

Upnp_SID = c_char * 44

##
# Represents the different types of searches that can be performed
# using the SDK for UPnP Devices API. By specifying these different
# values to UpnpSearchAsync, the control point application can
# control the scope of the search from all devices to specific
# devices or services.
class Upnp_SType_e:
	##
	# Search for all devices and services on the network.
	UPNP_S_ALL = 0

	##
	# Search for all root devices on the network.
	UPNP_S_ROOT = 1

	##
	# Search for a particular device type or a particular
	# device instant.
	UPNP_S_DEVICE = 2

	##
	# Search for a particular device type, possibly on a
	# particular device type or device instance.
	UPNP_S_SERVICE = 3

class Upnp_STYPE(Upnp_SType_e):
	pass

##
# Specifies the type of description in UpnpRegisterRootDevice2.
# These values control how UpnpRegisterRootDevice2 interprets
# the description parameter.
class Upnp_DescType_e:
	##
	# The description is the URL to the description document.
	UPNPREG_URL_DESC = 0

	##
	# The description is a file name on the local file system
	# containing the description of the device.
	UPNPREG_FILENAME_DESC = 1

	##
	# The description is a pointer to a character array
	# containing the XML description document.
	UPNPREG_BUF_DESC = 2

class Upnp_DescType(c_int):
	pass

class in_addr(Structure):
	pass

uint32_t = c_uint32
in_addr_t = uint32_t
in_addr._fields_ = [
	('s_addr', in_addr_t)
]

##
# Returned as part of a UPNP_CONTROL_ACTION_COMPLETE callback.
class Upnp_Action_Request(Structure):
	pass

Upnp_Action_Request._fields_ = [
	('ErrCode', c_int),
	('Socket', c_int),
	('ErrStr', c_char * LINE_SIZE),
	('ActionName', c_char * NAME_SIZE),
	('DevUDN', c_char * NAME_SIZE),
	('ServiceID', c_char * NAME_SIZE),
	('ActionRequest', POINTER(IXML_Document)),
	('ActionResult', POINTER(IXML_Document)),
	('CtrlPtIPAddr', in_addr),
	('SoapHeader', POINTER(IXML_Document))
]

class Upnp_Action_Complete(Structure):
	pass

Upnp_Action_Complete._fields_ = [
	('ErrCode', c_int),
	('CtrlUrl', c_char * NAME_SIZE),
	('ActionRequest', POINTER(IXML_Document)),
	('ActionResult', POINTER(IXML_Document))
]

##
# Reprensents the request for concurrent value of a state variable in a service
# state table.
class Upnp_State_Var_Request(Structure):
	pass

Upnp_State_Var_Request._fields_ = [
	('ErrCode', c_int),
	('Socket', c_int),
	('ErrStr', c_char * LINE_SIZE),
	('DevUDN', c_char * NAME_SIZE),
	('ServiceID', c_char * NAME_SIZE),
	('StateVarName', c_char * NAME_SIZE),
	('CtrlPtIPAddr', in_addr),
	('CurrentVal', DOMString)
]

##
# Represents the apply for the current value of a state variable in an
# asynchronous call.
class Upnp_State_Var_Complete(Structure):
	pass

Upnp_State_Var_Complete._fields_ = [
	('ErrCode', c_int),
	('CtrlUrl', c_char * NAME_SIZE),
	('StateVarName', c_char * NAME_SIZE),
	('CurrentVal', DOMString)
]

##
# Returned along with a UPNP_EVENT_RECEIVED callback.
class Upnp_Event:
	pass

Upnp_Event._fields_ = [
	('Sid', Upnp_SID),
	('EventKey', c_int),
	('ChangedVariables', POINTER(IXML_Document))
]

sa_family_t = c_ushort
in_port_t = c_uint16

class sockaddr_in(Structure):
	pass

sockaddr_in._fields_ = [
	('sin_family', sa_family_t),
	('sin_port', in_port_t),
	('sin_addr', in_addr),
	('sin_zero', c_ubyte * 8)
]

##
# Returned in a UPNP_DISCOVERY_RESULT callback.
class Upnp_Discovery(Structure):
	pass

Upnp_Discovery._fields_ = [
	('ErrCode', c_int),
	('Expires', c_int),
	('DeviceId', c_char * LINE_SIZE),
	('DeviceType', c_char * LINE_SIZE),
	('ServiceType', c_char * LINE_SIZE),
	('ServiceVer', c_char * LINE_SIZE),
	('Location', c_char * LINE_SIZE),
	('Os', c_char * LINE_SIZE),
	('Date', c_char * LINE_SIZE),
	('Ext', c_char * LINE_SIZE),
	('DestAddr', sockaddr_in)
]

##
# Returned along with a UPNP_EVENT_SUBSCRIBE_COMPLETE or
# UPNP_EVENT_UNSUBSCRIBE_COMPLETE callback.
class Upnp_Event_Subscribe(Structure):
	pass

Upnp_Event_Subscribe._fields_ = [
	('Sid', Upnp_SID),
	('ErrCode', c_int),
	('PublisherUrl', c_char * NAME_SIZE),
	('TimeOut', c_int)
]

##
# Returned along with a UPNP_EVENT_SUBSCRIPTION_REQUEST callback.
class Upnp_Subscription_Request(Structure):
	pass

Upnp_Subscription_Request._fields_ = [
	('ServiceId', c_char_p),
	('UDN', c_char_p),
	('Sid', Upnp_SID)
]

class File_Info(Structure):
	pass

File_Info._fields_ = [
	('file_length', c_long),
	('last_modified', c_long),
	('is_directory', c_int),
	('is_readable', c_int),
	('content_type', DOMString)
]


##
# The type of handle returned by the web server for open requests.
UpnpWebFileHandle = c_void_p

##
# This is a wrapper class for c_char_p that allows for returning data through a function argument as is common in C
class c_char_p_ret(c_char_p):
	def from_param(self, *args):
		return self

##
# The UpnpVirtualDirCallbacks structure contains the pointers to
# file-related callback functions a device application can register
# to virtualize URLs.
class UpnpVirtualDirCallbacks(Structure):
	pass

get_info_prototype = CFUNCTYPE(c_int, c_char_p, POINTER(File_Info))
open_prototype     = CFUNCTYPE(UpnpWebFileHandle, c_char_p, c_int)
read_prototype     = CFUNCTYPE(c_int, UpnpWebFileHandle, c_char_p_ret, c_long)
write_prototype    = CFUNCTYPE(c_int, UpnpWebFileHandle, c_char_p, c_long)
seek_prototype     = CFUNCTYPE(c_int, UpnpWebFileHandle, c_long, c_int)
close_prototype    = CFUNCTYPE(c_int, UpnpWebFileHandle)

UpnpVirtualDirCallbacks._fields_ = [
	('get_info', get_info_prototype),
	('open', open_prototype),
	('read', read_prototype),
	('write', write_prototype),
	('seek', seek_prototype),
	('close', close_prototype)
]

class virtual_Dir_List(Structure):
	pass

virtual_Dir_List._fields_ = [
	('next', POINTER(virtual_Dir_List)),
	('dirName', c_char * NAME_SIZE)
]

class virtualDirList(virtual_Dir_List):
	pass

##
# All callback functions share the same prototype, documented below.
# Note that any memory passed to the callback function is valid only
# during the callback and should be copied if it needs to persist.
# This callback function needs to be thread safe. The context and
# standard synchronizatoin methods can be used. Note, however, because
# of this the callback cannot call SDK functions unless explicitly noted.
Upnp_FunPtr = CFUNCTYPE(c_int, Upnp_EventType, c_void_p, c_void_p)

class UPnP:
	##
	# Does basic initialization for the Python interface.
	def __init__(self):
		libPath = find_library('upnp')
		self.upnp = cdll.LoadLibrary(libPath)
		upnp = self.upnp

		upnp.UpnpInit.restype = c_int
		upnp.UpnpInit.argtypes = [c_char_p, c_ushort]

		upnp.UpnpFinish.restype = c_int

		upnp.UpnpGetServerPort.restype = c_ushort

		upnp.UpnpGetServerIpAddress.restype = c_char_p

		upnp.UpnpRegisterClient.restype = c_int
		upnp.UpnpRegisterClient.argtypes = [Upnp_FunPtr, c_void_p, POINTER(UpnpClient_Handle)]

		upnp.UpnpRegisterRootDevice.restype = c_int
		upnp.UpnpRegisterRootDevice.argtypes = [c_char_p, Upnp_FunPtr, c_void_p, POINTER(UpnpDevice_Handle)]

		upnp.UpnpRegisterRootDevice2.restype = c_int
		upnp.UpnpRegisterRootDevice2.argtypes = [Upnp_DescType, c_char_p, c_long, c_int, Upnp_FunPtr, c_void_p, POINTER(UpnpDevice_Handle)]

		upnp.UpnpUnRegisterClient.restype = c_int
		upnp.UpnpUnRegisterClient.argtypes = [UpnpClient_Handle]

		upnp.UpnpUnRegisterRootDevice.restype = c_int
		upnp.UpnpUnRegisterRootDevice.argtypes = [UpnpDevice_Handle]

		upnp.UpnpSetContentLength.restype = c_int
		upnp.UpnpSetContentLength.argtypes = [UpnpClient_Handle, c_int]

		upnp.UpnpSetMaxContentLength.restype = c_int
		upnp.UpnpSetMaxContentLength.argtypes = [c_long]

		upnp.UpnpSearchAsync.restype = c_int
		upnp.UpnpSearchAsync.argtypes = [UpnpClient_Handle, c_int, c_char_p, c_void_p]

		upnp.UpnpSendAdvertisement.restype = c_int
		upnp.UpnpSendAdvertisement.argtypes = [UpnpDevice_Handle, c_int]

		upnp.UpnpGetServiceVarStatus.restype = c_int
		upnp.UpnpGetServiceVarStatus.argtypes = [UpnpClient_Handle, c_char_p, c_char_p, POINTER(DOMString)]

		upnp.UpnpGetServiceVarStatusAsync.restype = c_int
		upnp.UpnpGetServiceVarStatusAsync.argtypes = [UpnpClient_Handle, c_char_p, c_char_p, Upnp_FunPtr, c_void_p]

		upnp.UpnpSendAction.restype = c_int
		upnp.UpnpSendAction.argtypes = [UpnpClient_Handle, c_char_p, c_char_p, c_char_p, POINTER(IXML_Document), POINTER(POINTER(IXML_Document))]

		upnp.UpnpSendActionEx.restype = c_int
		upnp.UpnpSendActionEx.argtypes = [UpnpClient_Handle, c_char_p, c_char_p, c_char_p, POINTER(IXML_Document), POINTER(IXML_Document)]

		upnp.UpnpSendActionAsync.restype = c_int
		upnp.UpnpSendActionAsync.argtypes = [UpnpClient_Handle, c_char_p, c_char_p, c_char_p, POINTER(IXML_Document), Upnp_FunPtr, c_void_p]

		upnp.UpnpSendActionExAsync.restype = c_int
		upnp.UpnpSendActionExAsync.argtypes = [UpnpClient_Handle, c_char_p, c_char_p, c_char_p, POINTER(IXML_Document), POINTER(IXML_Document), Upnp_FunPtr, c_void_p]

		upnp.UpnpAcceptSubscription.restype = c_int
		upnp.UpnpAcceptSubscription.argtypes = [UpnpDevice_Handle, c_char_p, c_char_p, POINTER(c_char_p), POINTER(c_char_p), c_int, Upnp_SID]

		upnp.UpnpAcceptSubscriptionExt.restype = c_int
		upnp.UpnpAcceptSubscriptionExt.argtypes = [UpnpDevice_Handle, c_char_p, c_char_p, POINTER(IXML_Document), Upnp_SID]

		upnp.UpnpNotify.restype = c_int
		upnp.UpnpNotify.argtypes = [UpnpDevice_Handle, c_char_p, c_char_p, POINTER(c_char_p), POINTER(c_char_p), c_int]

		upnp.UpnpNotifyExt.restype = c_int
		upnp.UpnpNotifyExt.argtypes = [UpnpDevice_Handle, c_char_p, c_char_p, POINTER(IXML_Document)]

		upnp.UpnpRenewSubscription.restype = c_int
		upnp.UpnpRenewSubscription.argtypes = [UpnpDevice_Handle, c_int, Upnp_SID]

		upnp.UpnpRenewSubscriptionAsync.restype = c_int
		upnp.UpnpRenewSubscriptionAsync.argtypes = [UpnpClient_Handle, c_int, Upnp_SID, Upnp_FunPtr, c_void_p]

		upnp.UpnpSetMaxSubscriptions.restype = c_int
		upnp.UpnpSetMaxSubscriptions.argtypes = [UpnpDevice_Handle, c_int]

		upnp.UpnpSetMaxSubscriptionTimeOut.restype = c_int
		upnp.UpnpSetMaxSubscriptionTimeOut.argtypes = [UpnpDevice_Handle, c_int]

		upnp.UpnpSubscribe.restype = c_int
		upnp.UpnpSubscribe.argtypes = [UpnpClient_Handle, c_char_p, POINTER(c_int), Upnp_SID]

		upnp.UpnpSubscribeAsync.restype = c_int
		upnp.UpnpSubscribeAsync.argtypes = [UpnpClient_Handle, c_char_p, c_int, Upnp_FunPtr, c_void_p]

		upnp.UpnpUnSubscribe.restype = c_int
		upnp.UpnpUnSubscribe.argtypes = [UpnpClient_Handle, Upnp_SID]

		upnp.UpnpUnSubscribeAsync.restype = c_int
		upnp.UpnpUnSubscribeAsync.argtypes = [UpnpClient_Handle, Upnp_SID, Upnp_FunPtr, c_void_p]

		upnp.UpnpDownloadUrlItem.restype = c_int
		upnp.UpnpDownloadUrlItem.argtypes = [c_char_p, POINTER(c_char_p), c_char_p]

		upnp.UpnpOpenHttpGet.restype = c_int
		upnp.UpnpOpenHttpGet.argtypes = [c_char_p, POINTER(c_void_p), POINTER(c_char_p), POINTER(c_int), POINTER(c_int), c_int]

		upnp.UpnpOpenHttpGetProxy.restype = c_int
		upnp.UpnpOpenHttpGetProxy.argtypes = [c_char_p, c_char_p, POINTER(c_void_p), POINTER(c_char_p), POINTER(c_int), POINTER(c_int), c_int]

		upnp.UpnpOpenHttpGetEx.restype = c_int
		upnp.UpnpOpenHttpGetEx.argtypes = [c_char_p, POINTER(c_void_p), POINTER(c_char_p), POINTER(c_int), POINTER(c_int), c_int, c_int, c_int]

		upnp.UpnpReadHttpGet.restype = c_int
		upnp.UpnpReadHttpGet.argtypes = [c_void_p, c_char_p, POINTER(c_uint), c_int]

		upnp.UpnpHttpGetProgress.restype = c_int
		upnp.UpnpHttpGetProgress.argtypes = [c_void_p, POINTER(c_uint), POINTER(c_uint)]

		upnp.UpnpCancelHttpGet.restype = c_int
		upnp.UpnpCancelHttpGet.argtypes = [c_void_p]

		upnp.UpnpCloseHttpGet.restype = c_int
		upnp.UpnpCloseHttpGet.argtypes = [c_void_p]

		upnp.UpnpOpenHttpPost.restype = c_int
		upnp.UpnpOpenHttpPost.argtypes = [c_char_p, POINTER(c_void_p), c_char_p, c_int, c_int]

		upnp.UpnpWriteHttpPost.restype = c_int
		upnp.UpnpWriteHttpPost.argtypes = [c_void_p, c_char_p, POINTER(c_uint), c_int]

		upnp.UpnpCloseHttpPost.restype = c_int
		upnp.UpnpCloseHttpPost.argtypes = [c_void_p, POINTER(c_int), c_int]

		upnp.UpnpDownloadXmlDoc.restype = c_int
		upnp.UpnpDownloadXmlDoc.argtypes = [c_char_p, POINTER(POINTER(IXML_Document))]

		upnp.UpnpSetWebServerRootDir.restype = c_int
		upnp.UpnpSetWebServerRootDir.argtypes = [c_char_p]

		upnp.UpnpSetVirtualDirCallbacks.restype = c_int
		upnp.UpnpSetVirtualDirCallbacks.argtypes = [POINTER(UpnpVirtualDirCallbacks)]

		upnp.UpnpEnableWebserver.restype = c_int
		upnp.UpnpEnableWebserver.argtypes = [c_int]

		upnp.UpnpIsWebserverEnabled.restype = c_int

		upnp.UpnpAddVirtualDir.restype = c_int
		upnp.UpnpAddVirtualDir.argtypes = [c_char_p]

		upnp.UpnpRemoveVirtualDir.restype = c_int
		upnp.UpnpRemoveVirtualDir.argtypes = [c_char_p]

		upnp.UpnpFree.argtypes = [c_void_p]

	##
	# Initializes the Linux SDK for UPnP Devices. This function
	# must be called before any other API function can be called.
	# It should be called only once. Subsequent calls to this API
	# return a UPNP_E_INIT error code.
	# Optionally, the application can specify a host IP address
	# (in the case of a multi-homed configuration) and a port number
	# to use for all UPnP operations. Since a prot number can be used
	# only by one process, multiple processes using the SDK must
	# specify different port numbers.
	#
	# If unspecified, the SDK will use the first adapter's IP
	# address and an arbitrary port.
	#
	# This call is synchronous.
	#
	# @param HosIP The host IP address to use, in string format.
	# For example, "192.168.0.1" or None to use the first adapter's
	# IP address.
	# @param DestPort The destination port number to use. 0 will
	# pick an arbitrary free port.
	# @return An integer representing one of the following:
	# UPNP_E_SUCCESS, UPNP_E_OUTOF_MEMORY, UPNP_E_INIT, UPNP_E_INIT_FAILED,
	# UPNP_ESOCKET_BIND, UPNP_E_LISTEN, UPNP_E_OUTOF_SOCKET, UPNP_E_INTERNAL_ERROR.
	def UpnpInit(self, HostIP, DestPort):
		return self.upnp.UpnpInit(HostIP, DestPort)

	##
	# Terminates the Linux SDK for UPnP Devices. This function must be the
	# last API function called. It should be called only once. Subsequent calls
	# to this API return a UPNP_E_FINISH error code.
	#
	# @return An integer representing one of the following UPNP_E_SUCCESS,
	# UPNP_E_FINISH
	def UpnpFinish(self):
		return self.upnp.UpnpFinish()

	##
	# If '0' is used as the port number in UpnpInit, then this function
	# can be used to retrieve the actual port allocated to the SDK. If
	# UpnpInit has not succeeded then 0 is returned.
	#
	# @return The port on which an internal server is listening for
	# UPnP related requests.
	def UpnpGetServerPort(self):
		return self.upnp.UpnpGetServerPort()

	##
	# If None is used as teh IP address in UpnpInit, then this function
	# can be used to retrieve the actual interface address on which
	# device is running. If UpnpInit has not succeeded then None is
	# returned.
	#
	# @return The IP address on which an internal server is listening
	# for UPnP related requests.
	def UpnpGetServerIpAddress(self):
		return self.upnp.UpnpGetServerIpAddress()

	##
	# UpnpRegisterClient registers a control point application with
	# the SDK. A control point application cannot make any other API
	# calls until it registers using this function.
	#
	# UpnpRegisterClient is a synchronous call and generates no
	# callbacks. Callbacks can occur as soon as this function returns.
	#
	# @param Callback Pointer to a function for receiving asynchronous events.
	# @param Cookie Pointer to user data returned with the callback function
	# when invoked.
	# @param Hnd Pointer to a variable to store the new control point handle.
	# 
	# @return An integer representing one of the following:
	# UPNP_E_SUCCESS, UPNP_E_FINISH, UPNP_E_INVALID_PARAM, UPNP_E_OUTOF_MEMORY.
	def UpnpRegisterClient(self,Callback, Cookie, Hnd):
		return self.upnp.UpnpRegisterClient(Callback, Cookie, Hnd)

	##
	# UpnpRegisterRootDevice registers a device application with the SDK.
	# A device application cannot make any other API calls until it
	# registers using this function. Device applications can also register
	# as control points (see UpnpRegisterClient to get a control point
	# handle to perform control point functionality).
	#
	# UpnpRegisterRootDevice is synchronous and does not generate any
	# callbacks. Callbacks can occur as soon as this function returns.
	#
	# @param DescUrl Pointer to a string containing the description URL
	# for this root device instance.
	# @param Callback Pointer to the callback function for receiving
	# asynchronous events.
	# @param Hnd Pointer to a variable to store the new device handle.
	#
	# @return An integer representing one of the following: UPNP_E_SUCCESS,
	# UPNP_E_FINISH, UPNP_E_INVALID_DESC, UPNP_E_INVALID_URL, UPNP_E_INVALID_PARAM,
	# UPNP_E_NETWORK_ERROR, UPNP_E_SOCKET_WRITE, UPNP_E_SOCKET_READ,
	# UPNP_E_SOCKET_BIND, UPNP_E_SOCKET_CONNECT, UPNP_E_OUTOF_SOCKET,
	# UPNP_E_OUTOF_MEMORY.
	def UpnpRegisterRootDevice(self, DescUrl, Callback, Cookie, Hnd):
		return self.upnp.UpnpRegisterRootDevice(DescUrl, Callback, Cookie, Hnd)

	##
	# UpnpRegisterRootDevice2 is similar to UpnpRegisterRootDevice, except
	# that it also allows the description document to be specified as a
	# file or memory buffer. The description can also be configured to have
	# the correct IP and port address.
	#
	# NOTE: For the configuration to be functional, the internal web server
	# MUST be present. In addition, the web server MUST be activated (using
	# UpnpSetWebServerRootDir) before calling this function. The only
	# condition where the web server can be absent is if the description
	# document is specified as a URL and no configuration is required (i.e.
	# config_baseURL = 0).
	#
	# UpnpRegisterRootDevice2 is synchronous and does not generate any
	# callbacks. Callbacks can occur as soon as this function returns.
	#
	# Examples of using different types of description documents:
	# \begin{verbatim}
	# 1) Description specified as a URL:
	# 	descriptionType == UPNPREG_URL_DESC
	#	description is the URL
	#	bufferLen = 0 (ignored)
	# 2) Description specified as a file:
	#	descriptionType == UPNPREG_FILENAME_DESC
	#	description is a filename
	#	bufferLen = 0 (ignored)
	# 3) Description specified as a memory buffer:
	# 	descriptionType == UPNPREG_BUF_DESC
	# 	description is pointer to a memory buffer
	# 	bufferLen == length of memory buffer
	# \end{verbatim}
	#
	# @param descriptionType The type of description document.
	# @param description Treated as a URL, file name or memory buffer
	# depending on description type.
	# @param bufferLen The length of memory buffer if passing a
	# description in a buffer, otherwise it is ignored.
	# @param config_baseURL If nonzero, URLBase of description document
	# is configured and the description is served using the interal web
	# server.
	# @param Fun Pointer to a callback function for receiving
	# asynchronous events.
	# @param Cookie Pointer to user data returned with the callback
	# function when invoked.
	# @param Hnd Pointer to a variable to store the new device handle.
	#
	# @return An integer representing one of the following: UPNP_E_SUCCESS,
	# UPNP_E_FINISH, UPNP_E_INVALID_DESC, UPNP_E_INVALID_PARAM,
	# UPNP_E_NETWORK_ERROR, UPNP_E_SOCKET_WRITE, UPNP_E_SOCKET_ERROR,
	# UPNP_E_SOCKET_BIND, UPNP_E_SOCKET_CONNECT, UPNP_E_OUTOF_SOCKET,
	# UPNP_E_OUTOF_MEMORY, UPNP_E_URL_TOO_BIG, UPNP_E_FILE_NOT_FOUND,
	# UPNP_E_FILE_READ_ERROR, UPNP_E_INVALID_URL, UPNP_E_EXT_NOT_XML,
	# UPNP_E_NO_WEB_SERVER
	def UpnpRegisterRootDevice2(self, descriptionType, description, bufferLen, config_baseURL, Fun, Cookie, Hnd):
		return self.upnp.UpnpRegisterRootDevice2(descriptionType, description, bufferLen, config_baseURL, Fun, Cookie, Hnd)

	##
	# UpnpUnRegisterClient unregisters a control point
	# application, unsubscribing all active subscriptions.
	# After this call, the UpnpClient_Handle is no longer
	# valid.
	#
	# UpnpUnRegisterClient is a synchronous call and
	# generates no callbacks. The SDK generates no more
	# callbacks after this function returns.
	#
	# @param Hnd The handle of the control pointer instance
	# to unregister.
	#
	# @return An integer representing one of the following:
	# UPNP_E_SUCCESS, UPNP_E_INVALID_HANDLE.
	def UpnpUnRegisterClient(self, Hnd):
		return self.upnp.UpnpUnRegisterClient(Hnd)

	##
	# Unregisters a root device registered with
	# UpnpRegisterRootDevice or UpnpRegisterRootDevice2.
	# After this call, the UpnpDevice_Handle is no longer
	# valid. For all advertisements that have not yet
	# expired, the SDK sends a device unavailable message
	# automatically.
	#
	# @param Hnd The handle of the root device instance to
	# unregister.
	#
	# @return An integer representing one of the following:
	# UPNP_E_SUCCESS, UPNP_E_INVALID_HANDLE.
	def UpnpUnRegisterRootDevice(self, Hnd):
		return self.upnp.UpnpUnRegisterRootDevice(Hnd)

	##
	# OBSOLETE METHOD : use UpnpSetMaxContentLength instead.
	# Warning: the Handle argument provided here is not used,
	# so the effect of this function is global to the SDK
	# (= same as UpnpSetMaxContentLength).
	#
	# @param Hnd 
	# @param contentLength
	def UpnpSetContentLength(self, Hnd, contentLength):
		return self.upnp.UpnpSetContentLength(Hnd, contentLength)

	##
	# Sets the maximum content-length that the SDK wil
	# process on an incoming SOAP requests or responses.
	# This API allows devices that have memory constraints
	# to exhibit consistent behavior if the size of the
	# incoming SOAP message exceeds the memory that device
	# can allocate. The default maximum content-length is
	# DEFAULT_SOAP_CONTENT_LENGTH = 16K bytes.
	#
	# @param contentLength The maximum permissible content
	# length for incoming SOAP actions, in bytes.
	#
	# @return An integer representing one of the following:
	# UPNP_E_SUCCESS.
	def UpnpSetMaxContentLength(self, contentLength):
		return self.upnp.UpnpSetMaxContentLength(contentLength)

	##
	# UpnpSearchAsync searches for devices matching the given
	# search target. The function returns immediately and the
	# SDK calls the default callback function, registered
	# during the UpnpRegisterClient call, for each matching
	# root device, device, or service. The application
	# spcifies the search type by the Target parameter.
	#
	# Note that there is no way for the DSK to distinguish
	# which client instance issued a particular search.
	# Therefore, the client can get search callbacks that
	# do not match the original criteria of the search. Also,
	# the application will receive multiple callbacks for
	# each search.
	#
	# @param Hnd The handle of the client performing the
	# search.
	# @param Mx The time, in seconds, to wait for responses.
	# If the time is greater than MAX_SEARCH_TIME then the
	# time is set to MAX_SEARCH_TIME. If the time is less
	# than MIN_SEARCH_TIME then the time is set to
	# MIN_SEARCH_TIME.
	# @param Target The search target as defined in the UPnP
	# Device Architecture v1.0 specification.
	# @param Cookie The user data to pass when the callback
	# function is invoked.
	#
	# @return An integer representing one of the following:
	# UPNP_E_SUCCESS, UPNP_E_INVALID_HANDLE,
	# UPNP_E_INVALID_PARAM.
	def UpnpSearchAsync(self, Hnd, Mx, Target, Cookie):
		return self.upnp.UpnpSearchAsync(Hnd, Mx, Target, Cookie)

	##
	# UpnpSendAdvertisement sends out the discovery
	# announcement for all devices and services for a
	# device. Each announcement is made with the same
	# experation time.
	#
	# UpnpSendAdvertisement is a synchronous call.
	#
	# @param Hnd The device handle for which to send out
	# the announcements.
	# @param Exp The expiration age, in seconds, of the
	# announcements.
	# 
	# @return An integer representing one of the following:
	# UPNP_E_SUCCESS, UPNP_E_INVALID_HANDLE,
	# UPNP_E_OUTOF_MEMORY
	def UpnpSendAdvertisement(self, Hnd, Exp):
		return self.upnp.UpnpSendAdvertisement(Hnd, Exp)

	##
	# UpnpGetServiceVarStatus queries the state of a state
	# variable of a service on another device. This is a
	# synchronous call. A positive return value indicates
	# a SOAP error code, whereas a negative return code
	# indicates an SDK error code. Note that the use of this
	# function is deprecated by the UPnP forum.
	#
	# @param Hnd The handle of the control point.
	# @param ActionURL The URL of the service.
	# @param VarName The name of the variable to query.
	# @param StVarVal The pointer to store the value for
	# VarName. The SDK allocates this string and the caller
	# needs to free it using ixmlFreeDOMString.
	#
	# @return An integer representing one of the following:
	# UPNP_E_SUCCESS, UPNP_E_INVALID_HANDLE,
	# UPNP_E_INVALID_URL, UPNP_E_INVALID_DESC,
	# UPNP_E_INVALID_PARAM, UPNP_E_OUTOF_MEMORY,
	# Upnp_SOAP_E_INVALID_VAR.
	def UpnpGetServiceVarStatus(self, Hnd, ActionURL, VarName, StVarVal):
		return self.upnp.UpnpGetServiceVarStatus(Hnd, ActionURL, VarName, StVarVal)

	##
	# UpnpGetServiceVarStatusAsync queries the state of a
	# variable of a services, generating a callback when
	# the operation is complete. Note that the use of this
	# function is deprecated by the UPnP Forum.
	#
	# @param Hnd The handle of the control point.
	# @param ActionURL The URL of the service.
	# @param VarName The name of the variable to query.
	# @param Fun Pointer to a callback function to be
	# invoked when the operation is complete.
	# @param Cookie Pointer to user data to pass to the
	# callback function when invoked.
	#
	# @return An integer representing one of the following:
	# UPNP_E_SUCCESS, UPNP_E_INVALID_HANDLE, UPNP_E_INVALID_URL,
	# UPNP_E_INVALID_PARAM, UPNP_E_OUTOF_MEMORY.
	def UpnpGetServiceVarStatusAsync(self, Hnd, VarName, Fun, Cookie):
		return self.upnp.UpnpGetServiceVarStatusAsync(Hnd, VarName, Fun, Cookie)

	##
	# UpnpSendAction sends message to change a state variable
	# in a service. This is a synchronous call that does not
	# return until the action is complete.
	#
	# Note that a positive return value indicates a
	# SOAP-protocol error code. In this case, the error
	# description can be retrieved from RespNode.
	# A negative return value indicates an SDK error.
	#
	# @param Hnd The handle of the control point.
	# @param ActionURL The action URl of the service.
	# @param ServiceType The type of the service.
	# @param DevUDN This parameter is ignored and None.
	# @param Action The DOM document for the action.
	# @param RespNode The DOM document for the response to
	# the action. The SDK allocates this document and
	# the caller needs to free it.
	#
	# @return An integer representing one of the following:
	# UPNP_E_SUCCESS, UPNP_E_INVALID_HANDLE,
	# UPNP_E_INVALID_URL, UPNP_E_INVALID_ACTION,
	# UPNP_E_INVALID_DEVICE, UPNP_E_INVALID_PARAM,
	# UPNP_E_OUTOF_MEMORY.
	def UpnpSendAction(self, Hnd, ActionURL, ServiceType, DevUDN, Action, RespNode):
		return self.upnp.UpnpSendAction(Hnd, ActionURL, ServiceType, DevUDN, Action, RespNode)

	##
	# UpnpSendActionEx sends a message to change a state
	# variable in a service. This is a synchronous call
	# that does not return until the action is complete.
	#
	# Note that a positive return value indiciates a
	# SOAP-protocol error code. In this case, the error
	# description can be retrieved from RespNode. A
	# negative return value indicates an SDK error.
	#
	# @param Hnd The handle of the control point sending
	# the action.
	# @param ActionURL The action URL of the service.
	# @param ServiceType The type of service.
	# @param DevUDN This parameter is ignored and must be None.
	# @param Header The DOM document for the SOAp header.
	# @param Action The DOM document for the action.
	# @param RespNode The DOM document for the response to the action. The SDK
	# allocates this document and the caller needs to free it.
	def UpnpSendActionEx(self, Hnd, ActionURL, ServiceType, DevUDN, Header, Action, RespNode):
		return self.upnp.UpnpSendActionEx(Hnd, ActionURL, ServiceType, DevUDN, Header, Action, RespNode)

	##
	# UpnpSendActionAsync sends a message to change a state
	# variable in a service, generating a callback when
	# the operation is complete. See UpnpSendAction for
	# comments on positive return values. These positive
	# return values are sent in the event struct associated
	# with the UPNP_CONTROL_ACTION_COMPLETE event.
	#
	# @param Hnd The handle of the control point sending the action.
	# @param ActionURL The action URL of the service.
	# @param ServiceType The type of the service.
	# @param DevUDN This parameter is ignored and must be None.
	# @param Action The DOM document for the action to perform on this device.
	# @param Fun Pointer to a callback functoin to be invoked when the operation completes.
	# @param Cookie Pointer to user data to be passed to the
	# callback when invoked.
	def UpnpSendActionAsync(self, Hnd, ActionURL, ServiceType, DevUDN, Action, Fun, Cookie):
		return self.upnp.UpnpSendActionAsync(Hnd, ActionURL, ServiceType, DevUDN, Action, Fun, Cookie)

	##
	# UpnpSendActionExAsync sends a message to change a state
	# variable in a service, generating a callback when the
	# operation is complete. See UpnpSendAction for comments
	# on positive return values. These positive return values
	# are sent in the event struct associated with the
	# UPNP_CONTROL_ACTION_COMPLETE event.
	#
	# @param Hnd The handle of the control point sending the
	# action.
	# @param ActionURL The action URL of the service.
	# @param ServiceType The type of the service.
	# @param DevUDN This parameter is ignored and must be None.
	# @param Header The DOM document for the SOAP header.
	# This may be None if the header is not required.
	# @param Action The DOM document for the action to
	# perform on this device.
	# @param Fun Pointer to a callback function to be invoked
	# when the operation completes.
	# @param Cookie Pointer to user data that to be passed
	# to the callback when invoked.
	def UpnpSendActionExAsync(self, Hnd, ActionURL, ServiceType, DevUDN, Header, Action, Fun, Cookie):
		return self.upnp.UpnpSendActionExAsync(Hnd, ActionURL, ServiceType, DevUDN, Header, Action, Fun, Cookie)

	##
	# UpnpAcceptSubscription accepts a subscription request
	# and sends out the current state of the eventable
	# variables for a service. The device application should
	# call this function when its receives a
	# UPNP_EVENT_SUBSCIPTION_REQUEST callback. This function
	# is synchronous and generates no callback.
	# UpnpAcceptSubscription can be called during the
	# execution of a callback function.
	#
	# @param Hnd The handle of the device.
	# @param DevID The device ID of the subdevice of the
	# service generating the event.
	# @param ServID The unique service identifier of the
	# service generating the event.
	# @param VarName Pointer to an array of event variables.
	# @param NewVal Pointer to an array of values for the
	# event variables.
	# @param cVariables The number of event variables in
	# VarName.
	# @param SubsId The subscription ID of the newly
	# registered control point.
	def UpnpAcceptSubscription(self, Hnd, DevID, ServID, VarName, NewVal, cVariables, SubsId):
		return self.upnp.UpnpAcceptSubscription(Hnd, DevID, ServID, VarName, NewVal, cVariables, SubsId)

	##
	# UpnpAcceptSubscriptionExt is similar to
	# UpnpAcceptSubscription except that it takes a DOM
	# document for the variables to event rather than an
	# array of strings. This function is synchronous
	# and generates no callbacks.
	#
	# UpnpAcceptSubscriptionExt can be called during the
	# execution of a callback function.
	#
	# @param Hnd The handle of the device.
	# @param DevID The device ID of the subdevice of the
	# service generating the event.
	# @param ServID The unique service identifier of the
	# service generating the event.
	# @param PropSet The DOM document for the property set.
	# Property set documents must conform to the Xml schema
	# defined in section 4.3 of the Universal Plug and Play
	# Device Architecture specification.
	# @pram SubsId The subscription ID of the newly
	# registered control point.
	#
	# @return An integer representing one of the following:
	# UPNP_E_SUCCESS, UPNP_E_INVALID_HANDLE,
	# UPNP_E_INVALID_SERVICE, UPNP_E_INVALID_SID,
	# UPNP_E_INVALID_PARAM, UPNP_E_OUTOF_MEMORY.
	def UpnpAcceptSubscriptionExt(self, Hnd, DevID, ServID, PropSet, SubsId):
		return self.upnp.UpnpAcceptSubscriptionExt(Hnd, DevID, ServID, PropSet, SubsId)

	##
	# UpnpNotify sends out an event change notification to
	# all control points subscribed to particular service.
	# This function is synchronous and generates no
	# callbacks.
	#
	# UpnpNotify may be called during a callback function
	# to send out a notification.
	#
	# @param Hnd the handle to the device sending the event.
	# @param DevID The device ID of the subdevice of the
	# service.
	# @param ServID The unique identifier of the service
	# generating the event.
	# @param VarName Pointer to an array of variables that
	# have changed.
	# @param NewVal Pointer to an array new values for
	# those variables.
	# @param cVariables The count of variables included in
	# this notifcation.
	def UpnpNotify(self, Hnd, DevID, ServID, VarName, NewVal, cVariables):
		return self.upnp.UpnpNotify(Hnd, DevID, ServID, VarName, NewVal, cVariables)

	##
	# UpnpNotifyExt is similar to UpnpNotify except that it takes a DOM document
	# for the event rather than an array of strings. This function is synchronous
	# and generates no callbacks.
	#
	# UpnpNotifyExt may be called during a callback function to send out a notification.
	#
	# @param Hnd The handle to the device sending the event.
	# @param DevID The device ID of the subdevice of the service generating the event.
	# @param PropSet The DOM document for the property set. Property set documents
	# must conform to the XML schema defined in section 4.3 of the Universal Plug
	# and Play Device Architecture specification.
	#
	# @return An integer representing one of the following: UPNP_E_SUCCESS,
	# UPNP_E_INVALID_HANDLE, UPNP_E_INVALID_SERVICE, UPNP_E_INVALID_PARAM,
	# UPNP_E_OUTOF_MEMORY.
	def UpnpNotifyExt(self, Hnd, DevID, ServID, PropSet):
		return self.upnp.UpnpNotifyExt(Hnd, DevID, ServID, PropSet)

	##
	# UpnpRenewSubscription renews a subscription that is about to expire. This
	# function is synchronous.
	#
	# @param Hnd The handle of the control point that is renewing the subscription.
	# @param TimeOut Pointer to a variable containing the requested subscription
	# time. Upon return, it contains the actual renewal time.
	# @param SubsId The ID for the subscription to renew.
	#
	# @return An integer representing one of the following: UPNP_E_SUCCESS,
	# UPNP_E_INVALID_HANDLE, UPNP_E_INVALID_PARAM, UPNP_E_INVALID_SID,
	# UPNP_E_SOCKET_WRITE, UPNP_E_SOCKET_READ, UPNP_E_SOCKET_BIND,
	# UPNP_E_SOCKET_CONNECT, UPNP_E_OUTOF_SOCKET, UPNP_E_BAD_RESPONSE,
	# UPNP_E_SUBSCRIBE_UNACCEPTED, UPNP_E_OUTOF_MEMORY.
	def UpnpRenewSubscription(self, Hnd, TimeOut, SubsId):
		return self.upnp.UpnpRenewSubscription(Hnd, SubsId)

	##
	# UpnpRenewSubscriptionAsync renews a subscription that is about to
	# expire, generating a callback when the operation is complete.
	#
	# Note that many of the error codes for this function are returned
	# in the Upnp_Event_Subscribe structure. In those cases, the function returns
	# UPNP_E_SUCCESS and the appropriate error code will be in the
	# Upnp_Event_Subscribe.ErrCode field in the Event structure passed to the
	# callback.
	#
	# @param Hnd The handle of the control point that is renewing the subscription.
	# @param TimeOut The requested subscription time. The actual timeout value is
	# returned when the callback function is called.
	# @param SubsId The ID for the subscription renew.
	# @param Fun Pointer to a callback function to be invoked when the renewal
	# is complete.
	# @param Cookie Pointer to user data passed to the callback function when invoked.
	#
	# @return An integer representing one of the following: UPNP_E_SUCCESS,
	# UPNP_E_INVALID_HANDLE, UPNP_E_INVALID_SID, UPNP_E_INVALID_PARAM,
	# UPNP_E_OUTOF_MEMORY, UPNP_E_NETWORK_ERROR, UPNP_E_SOCKET_WRITE,
	# UPNP_E_SOCKET_READ, UPNP_E_SOCKET_BIND, UPNP_E_SOCKET_CONNECT,
	# UPNP_E_OUTOF_SOCKET, UPNP_E_BAD_RESPONSE, UPNP_E_SUBSCRIBE_UNACCEPTED.
	def UpnpRenewSubscriptionAsync(self, Hnd, TimeOut, SubsId, Fun, Cookie):
		return self.upnp.UpnpRenewSubscriptionAsync(Hnd, TimeOut, SubsId, Fun, Cookie)

	##
	# UpnpSetMaxSubscriptions sets the maximum number of subscriptions accepted
	# per service. The default value accepts as many as system resources allow.
	# If the number of current subscriptions for a service is greater than the
	# requested value, the SDK accepts no new subscriptions or renewals,
	# however, the SDK does not remove any current subscriptions.
	#
	# @param Hnd The handle of the device for which the maximum number of subscriptions
	# is being set.
	# @param MaxSubscriptions The maximum number of subscriptions to be allowed
	# per service.
	#
	# @return An integer representing one of the following: UPNP_E_SUCCESS,
	# UPNP_E_INVALID_HANDLE.
	def UpnpSetMaxSubscriptions(self, Hnd, MaxSubscriptions):
		return self.upnp.UpnpSetMaxSubscriptions(Hnd, MaxSubscriptions)

	##
	# UpnpSetMaxSubscriptionsTimeOut sets the maximum time-out accepted for
	# a subscription request or renewal. The default value accepts the
	# time-out set by the control point. If a control point requests a
	# subscription time-out less than or equal to the maximum, the SDK grants
	# the value requested by the control point. If the time-out is greater,
	# the SDK returns the maximum value.
	#
	# @param Hnd The handle of the device for which the maximum subscription
	# time-out is being set.
	# @param MaxSubscriptionTimeOut The maximum subscription time-out to
	# be accepted.
	#
	# @return An integer representing one of the following: UPNP_E_SUCCESS,
	# UPNP_E_INVALID_HANDLE.
	def UpnpSetMaxSubscriptionTimeOut(self, Hnd, MaxSubscriptionTimeOut):
		return self.upnp.UpnpSetMaxSubscriptionTimeOut(Hnd, MaxSubscriptionTimeOut)

	##
	# UpnpSubscribe registers a control point to receive event notifications from
	# another device. This operation is synchronous.
	#
	# @param Hnd The handle of the control point.
	# @param PublisherUrl The URL of the service to subscribe to.
	# @param TimeOut Pointer to a variable containing the requested subscription
	# time. Upon return, it contains the actual subscription time returned from the
	# service.
	# @param SubsId Pointer to a variable to receive the subscription ID (SID).
	#
	# @return An integer representing one of the following: UPNP_E_SUCCESS,
	# UPNP_E_INVALID_HANDLE, UPNP_E_INVALID_URL, UPNP_E_INVALID_PARAM,
	# UPNP_E_NETWORK_ERROR, UPNP_E_SOCKET_WRITE, UPNP_E_SOCKET_READ,
	# UPNP_E_SOCKET_BIND, UPNP_E_SOCKET_CONNECT, UPNP_E_OUTOF_SOCKET,
	# UPNP_E_BAD_RESPONSE, UPNP_E_SUBSCRIBE_UNACCEPTED, UPNP_E_OUTOF_MEMORY.
	def UpnpSubscribe(self, Hnd, PublisherUrl, TimeOut, SubsId):
		return self.upnp.UpnpSubscribe(Hnd, PublisherUrl, TimeOut, SubsId)

	##
	# UpnpSubscribeAsync performs the same operation as UpnpSubscribe, but returns
	# immediately and calls the registered callback function when the operation
	# is complete.
	#
	# Note that many of the error codes for this function are returned in the
	# Upnp_Event_Subscribe structure. In those cases, the function returns
	# UPNP_E_SUCCESS and the appropriate error code will be in the
	# Upnp_Event_Subscribe.ErrCode field in the Event structure passed to the
	# callback.
	#
	# @param Hnd The handle of the control point that is subscribing.
	# @param PublisherUrl The URL of the service to subscribe to.
	# @param TimeOut The requested subscription time. Upon return, it contains
	# the actual subscription time returned from the service.
	# @param Fun Pointer to the callback function for this subscribe request.
	# @param Cookie A user data value passed to the callback function when invoked.
	#
	# @return An integer representing one of the following: UPNP_E_SUCCESS,
	# UPNP_E_INVALID_HANDLE, UPNP_E_INVALID_URL, UPNP_E_INVALID_PARAM,
	# UPNP_E_OUTOF_MEMORY, UPNP_E_NETWORK_ERROR, UPNP_E_SOCKET_WRITE,
	# UPNP_E_SOCKET_READ, UPNP_E_SOCKET_BIND, UPNP_E_OUTOF_SOCKET_CONNECT,
	# UPNP_E_OUTOF_SOCKET, UPNP_E_BAD_RESPONSE, UPNP_E_SUBSCRIBE_UNACCEPTED.
	def UpnpSubscribeAsync(self, Hnd, PublisherUrl, TimeOut, Fun, Cookie):
		return self.upnp.UpnpSubscribeAsync(Hnd, PublisherUrl, TimeOut, Fun, Cookie)

	##
	# UpnpUnSubscribe removes the subscription of a control point from a service
	# previously subscribed to using UpnpSubscribe or UpnpSubscribeAsync. This is
	# a synchronous call.
	#
	# @param Hnd The handle of the subscribed control point.
	# @param SubsId The ID returned when teh control point subscribed to the service.
	#
	# @return An integer representing one of the following: UPNP_E_SUCCESS,
	# UPNP_E_INVALID_HANDLE, UPNP_E_INVALID_SID, UPNP_E_NETWORK_ERROR,
	# UPNP_E_SOCKET_WRITE, UPNP_E_SOCKET_READ, UPNP_E_SOCKET_BIND, UPNP_E_SOCKET_CONNECT,
	# UPNP_E_OUTOF_SOCKET, UPNP_E_BAD_RESPONSE, UPNP_E_UNSUBSCRIBE_UNACCEPTED,
	# UPNP_E_OUTOF_MEMORY.
	def UpnpUnSubscribe(self, Hnd, SubsId):
		return self.upnp.UpnpUnSubscribe(Hnd, SubsId)

	##
	# UpnpUnSubscribeAsync removes a subscription of a control point from a service
	# previously subscribed to using UpnpSubscribe or UpnpSubscribeAsync, generating
	# a callback wen the operation is complete.
	#
	# Note that many of the error codes for this function are returned in the
	# Upnp_Event_Subscribe structure. In those cases, the function returns
	# UPNP_E_SUCCESS and the appropriate error code will be in the
	# Upnp_Event_Subscribe.ErrCode field in the Event structure passed to the callback.
	#
	# @param Hnd The handle of the subscribed control point.
	# @param SubsId The ID returned when the control point subscribed to the service.
	# @param Fun Pointer to a callback function to be called when the operation is completed.
	# @param Cookie Pointer to user data to pass to the callback function when invoked.
	#
	# @return An integer representing one of the following: UPNP_E_SUCCESS,
	# UPNP_E_INVALID_HANDLE, UPNP_E_INVALID_SID, UPNP_E_INVALID_PARAM,
	# UPNP_E_OUTOF_MEMORY, UPNP_E_NETWORK_ERROR, UPNP_E_SOCKET_WRITE, UPNP_E_SOCKET_READ,
	# UPNP_E_SOCKET_BIND, UPNP_E_SOCKET_CONNECT, UPNP_E_OUTOF_SOCKET, UPNP_E_BAD_RESPONSE,
	# UPNP_E_UNSUBSCRIBE.
	def UpnpUnSubscribeAsync(self, Hnd, SubsId, Fun, Cookie):
		return self.upnp.UpnpUnSubscribeAsync(Hnd, SubsId, Fun, Cookie)

	##
	# UpnpDownloadUrlItem downloads a file specified in a URL. The SDK allocates
	# the memory for outBuf and the application is responsible for freeing this memory.
	# Note that the item is passed as a single buffer. Large items should not be
	# transfered using this function.
	#
	# @param url URL of an item to download.
	# @param outBuf Buffer to store the download item.
	# @param contentType HTTP header value content type if present. It should be
	# at least LINE_SIZE bytes in size.
	#
	# @return An integer representing one of the following: UPNP_E_SUCCESS,
	# UPNP_E_INVALID_PARAM, UPNP_E_INVALID_URL, UPNP_E_OUTOF_MEMORY,
	# UPNP_E_NETWORK_ERROR, UPNP_E_SOCKET_WRITE, UPNP_E_SOCKET_READ, UPNP_E_SOCKET_BIND,
	# UPNP_E_SOCKET_CONNECT, UPNP_E_OUTOF_SOCKET.
	def UpnpDownloadUrlItem(self, url, outBuf, contentType):
		return self.upnp.UpnpDownloadUrlItem(url, outBuf, contentType)

	##
	# UpnpOpenHttpGet gets a file specified in a URL. The SDK allocates the memory
	# for handle and contentType, the application is responsible for freeing this
	# memory.
	#
	# @param url The URL of an item to get.
	# @param handle A pointer to store the handle for this connection.
	# @param contentType A buffer to store the media type of the item.
	# @param contentLength A pointer to store the length of the item.
	# @param httpStatus The status returned on receiving a response message.
	# @param timeout The time out value sent with the request during which a response
	# is expected from the server, failing which, an error is reported back to the user.
	#
	# @return An integer representing one of the following: UPNP_E_SUCCESS,
	# UPNP_E_INVALID_PARAM, UPNP_E_INVALID_URL, UPNP_E_OUTOF_MEMORY, UPNP_E_NETWORK_ERROR,
	# UPNP_E_SOCKET_WRITE, UPNP_E_SOCKET_READ, UPNP_E_SOCkET_BIND, UPNP_E_SOCKET_CONNECT,
	# UPNP_E_OUTOF_SOCKET, UPNP_E_BAD_RESPONSE.
	def UpnpOpenHttpGet(self, url, handle, contentType, contentLength, httpStatus, timeout):
		return self.upnp.UpnpOpenHttpGet(url, handle, contentType, contentLength, httpStatus, timeout)

	##
	# UpnpOpenHttpGetProxy gets a file specified in a URl through the specified proxy.
	# The SDK allocates the memory for handle and contentType, the application is
	# responsible for freeing this memory.
	#
	# @param url The URL of an item to get.
	# @param proxy_str The URL of the proxy.
	# @param handle A pointer to store the handle for this connection.
	# @param contentType A buffer to store the handle for this connection.
	# @param contentLength A pointer to store the length of the item.
	# @param httpStatus The status returned on receiving an error message.
	# @param timeout The time out value sent with the request during which a
	# response is expected from the server, failing which, an error is reported
	# back to the user.
	#
	# @return An integer representing one of the following: UPNP_E_SUCCESS,
	# UPNP_E_INVALID_PARAM, UPNP_E_INVALID_URL, UPNP_E_OUTOF_MEMORY,
	# UPNP_E_NETWORK_ERROR, UPNP_E_SOCKET_WRITE, UPNP_E_SOCKET_READ,
	# UPNP_E_SOCKET_BIND, UPNP_E_SOCKET_CONNECT, UPNP_E_OUTOF_SOCKET,
	# UPNP_E_BAD_RESPONSE.
	def UpnpOpenHttpGetProxy(self, url, proxy_str, handle, contentType, contentLength, httpStatus, timeout):
		return self.upnp.UpnpOpenGetProxy(url, proxy_str, handle, contentType, contentLength, httpStatus, timeout)

	##
	# UpnpOpenHttpGetEx gets specified number of bytes from a file specified in the
	# URL. The number of bytes is specified through a low count and a high count which
	# are passed as a range of bytes for the request. The SDK allocates the memory for
	# handle and contentType, the application is responsible for freeing this memory.
	#
	# @param url The URL of the item to get.
	# @param handle A pointer to store the handle for this connection.
	# @param contentType A buffer to store the media type of the item.
	# @param contentLength A buffer to store the length of the item.
	# @param httpStatus The status returned on receiving a response message from
	# the remote server.
	# @param lowRange An integer value representing the low end of a range to retrieve.
	# @param highRange An integer value representing the high end of a rante to retrieve.
	# @param timeout A time out value sent with the request during which a response is
	# expected from the server, failing which, an error is reported back to the user.
	#
	# @return An integer representing one of the following: UPNP_E_SUCCESS,
	# UPNP_E_INVALID_PARAM, UPNP_E_INVALID_URL, UPNP_E_OUTOF_MEMORY, UPNP_E_NETWORK_ERROR,
	# UPNP_E_SOCKET_WRITE, UPNP_E_SOCKET_READ, UPNP_E_SOCKET_BIND, UPNP_E_SOCKET_CONNECT,
	# UPNP_E_OUTOF_SOCKET, UPNP_E_BAD_RESPONSE.
	def UpnpOpenHttpGetEx(self, url, handle, contentType, contentLength, httpStatus, lowRange, highRange, timeout):
		return self.upnp.UpnpOpenHttpGetEx(url, handle, contentType, contentLength, httpStatus, lowRange, highRange, timeout)

	##
	# UpnpReadHttpGet gets specified number of bytes from a file specified in a URL.
	#
	# @param handle The token created by the call to UpnpOpenHttpGet.
	# @param buf The buffer to store the read item.
	# @param size The size of the buffer to be read.
	# @param timeout The tmie out value sent with the request during which a response
	# is expected from the server, failing which, an error is reported back to the user.
	#
	# @return An integer representing one of the following: UPNP_E_SUCCESS,
	# UPNP_E_INVALID_PARAM, UPNP_E_BAD_RESPONSE, UPNP_E_BAD_HTTPMSG, UPNP_E_CANCELED.
	def UpnpReadHttpGet(self, handle, buf, size, timeout):
		return self.upnp.UpnpReadHttpGet(handle, buf, size, timeout)

	##
	# UpnpHttpGetProgress retrieve progress information of an http-get transfer.
	#
	# @param handle The token created by the call to UpnpOpenHttpGet.
	# @param length The number of bytes received.
	# @param total The content length.
	#
	# @return An integer representing one of the following: UPNP_E_SUCCESS,
	# UPNP_E_INVALID_PARAM.
	def UpnpHttpGetProgress(self, handle, length, total):
		return self.upnp.UpnpHttpGetProgress(handle, length, total)

	##
	# UpnpCancelHttpGet set the cancel flag of the handle parameter.
	#
	# @param handle The token created by the call to UpnpOpenHttpGet.
	#
	# @return An integer representing one of the following: UPNP_E_SUCCESS,
	# UPNP_E_INVALID_PARAM.
	def UpnpCancelHttpGet(self, handle):
		return self.upnp.UpnpCancelHttpGet(handle)

	##
	# UpnpCloseHttpGet closes the connection and frees memory that was allocated for
	# the handle parameter.
	#
	# @param handle The token created by the call to UpnpOpenHttpGet.
	#
	# @return An integer representing one of the following: UPNP_E_SUCCESS,
	# UPNP_E_INVALID_PARAM.
	def UpnpCloseHttpGet(self, handle):
		return self.upnp.UpnpCloseHttpGet(handle)

	##
	# UpnpOpenHttpPost makes an HTTP POST request message, opens a connection to the
	# server and sends the POST request to the server if the connection to the
	# server succeeds. The SDK allocates the memory for handle and contentType,
	# the application is responsible for freeing this memory.
	#
	# @param url The URL in which to send the POST request.
	# @param handle A pointer in which to store the handle for this connection
	# This handle is required for further operations over this connection.
	# @param contentType A buffer to store the media type of content being sent.
	# @param contentLength The length of the content, in bytes, being posted.
	# @param timeout The time out value sent with the request during which a
	# response is expected from the server, failing which, an error is reported.
	#
	# @return An integer representing one of the following: UPNP_E_SUCCESS,
	# UPNP_E_INVALID_PARAM, UPNP_E_INVALID_URL, UPNP_E_OUTOF_MEMORY,
	# UPNP_E_SOCKET_ERROR, UPNP_E_SOCKET_WRITE, UPNP_E_SOCKET_CONNECT,
	# UPNP_E_OUTOF_SOCKET.
	def UpnpOpenHttpPost(self, url, handle, contentType, contentLength, timeout):
		return self.upnp.UpnpOpenHttpPost(url, handle, contentType, contentLength, timeout)

	##
	# UpnpWriteHttpPost sends a request to a server to copy the contents of a buffer
	# to the URI specified in the UpnpOpenHttpPost call.
	#
	# @param handle The handle of the connection created by the call to UpnpOpenHttpPost.
	# @param buf the buffer to be posted.
	# @param size The size, in bytes of buf.
	# @param timeout A timeout value sent with the request during which a response is
	# expected from the server, failing which, an error is reported.
	#
	# @return An integer representing one of the following: UPNP_E_SUCCESS,
	# UPNP_E_INVALID_PARAM, UPNP_E_SOCKET_WRITE, UPNP_E_OUTOF_SOCKET.
	def UpnpWriteHttpPost(self, handle, buf, size, timeout):
		return self.upnp.UpnpWriteHttpPost(handle, buf, size, timeout)

	##
	# UpnpCloseHttpPost sends and receives any pending data, closes the connection with
	# the server, and frees memory allocated during the UpnpOpenHttpPost call.
	#
	# @param handle The handle of the connection to close, created by the call to
	# UpnpOpenHttpPost.
	# @param httpStatus A pointer to a buffer to store the final status of the connection.
	# @param timeout A time out value sent with the request during which a response is
	# expected from the server, failing which, an error is reported.
	#
	# @return An integer representing one of the following: UPNP_E_SUCCESS,
	# UPNP_E_INVALID_PARAM, UPNP_E_SOCkET_READ, UPNP_E_OUTOF_SOCKET.
	def UpnpCloseHttpPost(self, handle, httpStatus, timeout):
		return self.upnp.UpnpCloseHttpPost(handle, httpStatus, timeout)

	##
	# UpnpDownloadXmlDoc downloads an XML document specified in a URL. The SDK parses
	# the document and returns it in the form of a DOM document. The application is
	# responsible for freeing the DOM document.
	#
	# @param url URL of the XML document.
	# @param xmlDoc A pointer in which to store the XML document.
	#
	# @return An integer representing one of the following: UPNP_E_SUCCESS,
	# UPNP_E_INVALID_PARAM, UPNP_E_INVALID_DESC, UPNP_E_INVALID_URL, UPNP_E_OUTOF_MEMORY,
	# UPNP_E_NETWORK_ERROR, UPNP_SOCKET_WRITE, UPNP_E_SOCKET_READ, UPNP_E_SOCKET_BIND,
	# UPNP_E_SOCKET_CONNECT, UPNP_E_OUTOF_SOCKET.
	def UpnpDownloadXmlDoc(self, url, xmlDoc):
		return self.upnp.UpnpDownloadXmlDoc(url, xmlDoc)

	##
	# UpnpSetWebServerRootDir sets the document root directory for the internal web
	# server. This directory is considered the root directory (i.e. "/") of the web server.
	#
	# This function also activates or deactivates the web server. To disable the web server,
	# pass None for rootDir; to activate, pass a valid directory string.
	#
	# Note that this function is not available when the web server is nto compiled into
	# the SDK.
	#
	# @param rootDir Path to the root directory of the web server.
	#
	# @return An integer representing one of the following: UPNP_E_SUCCESS,
	# UPNP_E_INVALID_PARAM.
	def UpnpSetWebServerRootDir(self, rootDir):
		return self.upnp.UpnpSetWebServerRootDir(rootDir)

	# UpnpSetVirtualDirCallbacks sets the callback function to be used to access a
	# virtual directory. Refer to the description of UpnpVirtualDirCallbacks for a
	# description of the functions.
	#
	# @param callbacks Pointer to a structure containing points to the virtual interface
	# functions.
	#
	# @return An integer representing one of the following: UPNP_E_SUCCESS,
	# UPNP_E_INVALID_ARGUMENT.
	def UpnpSetVirtualDirCallbacks(self, callbacks):
		return self.upnp.UpnpSetVirtualDirCallbacks(callbacks)

	##
	# UpnpEnableWebServer enables or disables the webserver. A value of TRUE
	# enables the webserver, FALSE disables it.
	#
	# @param enable TRUE to enable, FALSE to disable
	#
	# @return An integer representing one of the following: TRUE, FALSE.
	def UpnpEnableWebserver(self, enable):
		return self.upnp.UpnpEnableWebserver(enable)

	##
	# UpnpIsWebServerEnabled returns TRUE if the webserver is enabled, or FALSE if it is not.
	#
	# @return TRUE if it is and FALSE if it is not.
	def UpnpIsWebserverEnabled(self):
		return self.upnp.UpnpIsWebserverEnabled()

	##
	# UpnpAddVirtualDir adds a virtual directory mapping.
	# 
	# All webserver requests containing the given directory are read using functions contained
	# in a UpnpVirtualDirCallbacks structure registered via UpnpSetVirtualDirCallbacks.
	#
	# @param dirName The name of the new directory mapping to add.
	#
	# @return An integer representing one of the following: UPNP_E_SUCCESS, UPNP_E_INVALID_ARGUMENT.
	def UpnpAddVirtualDir(self, dirName):
		return self.upnp.UpnpAddVirtualDir(dirName)

	##
	# UpnpRemoveVirtualDir removes a virtual directory mapping made with UpnpAddVirtualDir
	# 
	# @param The name of teh virtual directory mapping to remove.
	#
	# @return An integer representing one of the following: UPNP_E_SUCCESS, UPNP_E_INVALID_ARGUMENT.
	def UpnpRemoveVirtualDir(self, dirName):
		return self.upnp.UpnpRemoveVirtualDir(dirName)

	##
	# UpnpRemoveAllVirtualDirs removes all virtual directory mappings.
	def UpnpRemoveAllVirtualDirs(self):
		return self.upnp.UpnpRemoveAllVirtualDirs()

	def UpnpFree(self, item):
		return self.upnp.UpnpFree(item)

